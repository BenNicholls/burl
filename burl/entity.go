package burl

//interface for all types of entities that are built upon BurlEntity ensures other core objects can
//interact with BurlEntities.
type Entity interface {
	Move(dx, dy int)
	MoveTo(x, y int)
	GetLight() EntityLight
	Drawable
}

//Basic entity definition. Entities position and visual information. Anything that occupies space on
//a TileMap is an entity. Players and enemies, furniture, doors, whatever. More specific things can be
//added to this class to give all possible entites these features.
type EntityPrototype struct {
	Visuals //Visual information for rendering to the TileMap

	X, Y  int //Position on a TileMap
	Light EntityLight
}

func NewBurlEntity(x, y int, v Visuals) *EntityPrototype {
	return &EntityPrototype{v, x, y, EntityLight{}}
}

func (e *EntityPrototype) Move(dx, dy int) {
	e.X += dx
	e.Y += dy
}

func (e *EntityPrototype) MoveTo(x, y int) {
	e.X = x
	e.Y = y
}

func (e EntityPrototype) GetLight() EntityLight {
	return e.Light
}

//Struct defining the light generated by an entity. All dynamic light on the TileMap must be an entity,
//even if it is invisible.
type EntityLight struct {
	Strength int
	Colour   uint32
	//Flicker bool //maybe the light can flicker? TODO: think harder about this.
}
