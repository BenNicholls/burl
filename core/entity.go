package core

//interface for all types of entities that are built upon BurlEntity
//ensures other core objects can interact with BurlEntities.
type Entity interface {
	Move(dx, dy int)
	MoveTo(x, y int)
	GetVisuals() Visuals
	GetLight() EntityLight
}


//Basic entity definition. Entities have position, an ID, and a name. Anything that occupies
//space on a TileMap is an entity. Players and enemies, furniture, doors, whatever. More specific things can be added to this class
//to give all possible entites these features.
type BurlEntity struct {
	Name    string
	ID      int             //Unique ID to this specific entity
	X, Y    int             //Position on a TileMap
	Vis     Visuals //Visual information for rendering to the TileMap
	Light   EntityLight
}

func NewBurlEntity(x, y, id int, name string, v Visuals) *BurlEntity {
	return &BurlEntity{name, id, x, y, v, EntityLight{}}
}

func (e *BurlEntity) Move(dx, dy int) {
	e.X += dx
	e.Y += dy
}

func (e *BurlEntity) MoveTo(x, y int) {
	e.X = x
	e.Y = y
}

func (e BurlEntity) GetVisuals() Visuals {
	return e.Vis
}

func (e BurlEntity) GetLight() EntityLight {
	return e.Light
}

//Struct defining the light generated by an entity. All dynamic light on the TileMap must be an entity, even if it is invisible.
type EntityLight struct {
	Strength int
	Colour   uint32
	//Flicker bool //maybe the light can flicker? TODO: think harder about this.
}
